思路就是：首先定义一个同样长度的辅助数组，然后遍历整个数组，求出原始数组只有一个元素时的最大子数组的和，并赋值给辅助数组的第一项，然后再求出原始数组有两个元素时的最大子数组和，再赋值给元素的第二个位置，依次求到最后，只不过中间加个max函数，每两次比较一下，求出最大值。

* 

```
class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        //动态规划
        int[] arr = new int[nums.length];//定义一个相同长度的数组，作用是存储前n项的连续子数组最大值
        arr[0] = nums[0];//当数组中只有一个数时，第一项就是最大值。
        for(int i = 1;i < nums.length;i++){
            arr[i] = nums[i];
            if(arr[i-1]>0){
                arr[i] += arr[i-1];
            }
            max = Math.max(max, arr[i]);
        }
        return max;
    }
}
```

