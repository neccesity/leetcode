### 解题思路

先找出数组中字典序最小和最大的字符串，最长公共前缀即为这两个字符串的公共前缀
![~J5{I}\[\]G{FG3AA1KHBS5W1.png](https://pic.leetcode-cn.com/db8e2b71d5388b52bed8e5a022be03f1aa3c5a58249182ff9fb1fcbe1921b10f-~J5%7BI%7D%5B%5DG%7BFG3AA1KHBS5W1.png)

### 代码

下面是 C++17 的代码

* cpp

```cpp
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if(strs.empty()) return "";
        // c++17 结构化绑定
        // str0, str1 分别是一个 pair<string, string> 的 first 和 second
        const auto [str0, str1] = minmax_element(strs.begin(), strs.end());
        for(int i = 0; i < str0->size(); ++i)
            if(str0->at(i) != str1->at(i)) return str0->substr(0, i);
        return *str0;
    }
};
```

等同的 C++11 代码如下

* cpp

```cpp
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if(strs.empty()) return "";
        const auto p = minmax_element(strs.begin(), strs.end());
        for(int i = 0; i < p.first->size(); ++i)
            if(p.first->at(i) != p.second->at(i)) return p.first->substr(0, i);
        return *p.first;
    }
};
```

Python 代码

* python

```python
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if not strs: return ""
        str0 = min(strs)
        str1 = max(strs)
        for i in range(len(str0)):
            if str0[i] != str1[i]:
                return str0[:i]
        return str0
```

**喜欢就点个赞再走吧~**

