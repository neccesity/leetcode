
class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) {
        this.val = val;
    }
}

class MyLinkedList {
    ListNode head;
    int size;
    public MyLinkedList() {
        head = new ListNode(0);
        size = 0;
    }
    
    public int get(int index) {
        if(index<0||index>=size)return -1;
        ListNode currentNode = head;
        while(index>0) {
            currentNode=currentNode.next;
            index--;
        }
        return currentNode.val;
    }
    
    public void addAtHead(int val) {
        ListNode newNode = new ListNode(val);
        newNode.next=head;
        head=newNode;
        size++;
    }
    
    public void addAtTail(int val) {
        addAtIndex(size,val);
    }
    
    public void addAtIndex(int index, int val) {
        if(index>size||index<0) return;
        ListNode currentNode = head;
        if(index==0) {
            addAtHead(val);
            return;
        }
        while(index>1) {
            currentNode=currentNode.next;
            index--;
        }
        ListNode nextNode = currentNode.next;
        ListNode newNode = new ListNode(val);
        currentNode.next=newNode;
        newNode.next=nextNode;
        size++;
    }
    
    public void deleteAtIndex(int index) {
        ListNode currentNode = head;
        if(index==0) {
            head=head.next;
        } else {
            ListNode preNode=head;
            for(int i=0;i<index-1;i++) {
                preNode=currentNode=currentNode.next;
            }
            currentNode=currentNode.next;
            preNode.next=currentNode.next;
        }
        size--;
    }
}

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */

//total_testcases:64
//total_correct:13
//input_formatted:["MyLinkedList","addAtHead","deleteAtIndex","addAtHead","addAtHead","addAtHead","addAtHead","addAtHead","addAtTail","get","deleteAtIndex","deleteAtIndex"]
[[],[2],[1],[2],[7],[3],[2],[5],[5],[5],[6],[4]]
//expected_output:[null,null,null,null,null,null,null,null,null,2,null,null]
//code_output:[null,null,null,null,null,null,null,null,null,5,null,null]
