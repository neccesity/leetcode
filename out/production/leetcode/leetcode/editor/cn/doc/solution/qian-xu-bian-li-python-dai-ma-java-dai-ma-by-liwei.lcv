#### 解题思路

建议点击右下角倍速观看，录制视频的时候嗓子不舒服，声音有点奇怪，请大家谅解。或者直接观看 [官方题解](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/cong-qian-xu-yu-zhong-xu-bian-li-xu-lie-gou-zao-9/)。

![...de 第 105 题视频讲解-1.mp4](https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/a6cfca3c-effb-4f3f-a36c-3e1c87228806)

**思路分析**：

二叉树相关的很多问题的解决思路都有分治法的思想在里面。我们复习一下分治法的思想：**把原问题拆解成若干个与原问题结构相同但规模更小的子问题，待子问题解决以后，原问题就得以解决**，“归并排序”和“快速排序”都是分治法思想的应用，其中“归并排序”先无脑地“分”，在“合”的时候就麻烦一些；“快速排序”开始在 partition 上花了很多时间，即在“分”上使了很多劲，然后就递归处理下去就好了，没有在“合”上再花时间。

抓住“前序遍历的第 1 个元素一定是二叉树的根结点”，不难写出代码。关键还是拿 LeetCode 上面的例子画一个图，思路就很清晰了。

前序遍历数组的第 $1$ 个数（索引为 $0$）的数一定是二叉树的根结点，于是可以在中序遍历中找这个根结点的索引，然后把“前序遍历数组”和“中序遍历数组”分为两个部分，就分别对应二叉树的左子树和右子树，分别递归完成就可以了。

![105-1.png](https://pic.leetcode-cn.com/fe215cdc993b06a2eeca7939ac04d370f3fe725e7e568e6ced17d1757020be9f-105-1.png)

下面是一个具体的例子，演示了如何计算数组子区间的边界：

![image.png](https://pic.leetcode-cn.com/1c96c49acdd0e51b195dd5916526291f23897f77cea700ea89aa81a4a900a6d7-image.png)

这道题完成了以后可以顺便把 [「力扣」 第 106 题：从中序与后序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)也一起做了。

**参考代码 1**：

* []

```Java
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) {
        val = x;
    }
}

public class Solution {

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int preLen = preorder.length;
        int inLen = inorder.length;
        if (preLen != inLen) {
            throw new RuntimeException("Incorrect input data.");
        }
        return buildTree(preorder, 0, preLen - 1, inorder, 0, inLen - 1);
    }


    /**
     * 使用数组 preorder 在索引区间 [preLeft, preRight] 中的所有元素
     * 和数组 inorder 在索引区间 [inLeft, inRight] 中的所有元素构造二叉树
     *
     * @param preorder 二叉树前序遍历结果
     * @param preLeft  二叉树前序遍历结果的左边界
     * @param preRight 二叉树前序遍历结果的右边界
     * @param inorder  二叉树后序遍历结果
     * @param inLeft   二叉树后序遍历结果的左边界
     * @param inRight  二叉树后序遍历结果的右边界
     * @return 二叉树的根结点
     */
    private TreeNode buildTree(int[] preorder, int preLeft, int preRight,
                               int[] inorder, int inLeft, int inRight) {
        // 因为是递归调用的方法，按照国际惯例，先写递归终止条件
        if (preLeft > preRight || inLeft > inRight) {
            return null;
        }
        // 先序遍历的起点元素很重要
        int pivot = preorder[preLeft];
        TreeNode root = new TreeNode(pivot);
        int pivotIndex = inLeft;
        // 严格上说还要做数组下标是否越界的判断 pivotIndex < inRight
        while (inorder[pivotIndex] != pivot) {
            pivotIndex++;
        }
        root.left = buildTree(preorder, preLeft + 1, pivotIndex - inLeft + preLeft,
                inorder, inLeft, pivotIndex - 1);
        root.right = buildTree(preorder, pivotIndex - inLeft + preLeft + 1, preRight,
                inorder, pivotIndex + 1, inRight);
        return root;
    }
}
```

* []

```Python
from typing import List


class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        pre_len = len(preorder)
        in_len = len(inorder)
        if pre_len != in_len:
            raise Exception('数据输入错误')
        root = self.__build_tree(preorder, 0, pre_len - 1, inorder, 0, in_len - 1)
        return root

    def __build_tree(self, preorder, pre_left, pre_right,
                     inorder, in_left, in_right):
        if pre_left > pre_right or in_left > in_right:
            return None

        pivot = preorder[pre_left]
        pivot_index = in_left
        while inorder[pivot_index] != pivot:
            pivot_index += 1
        root = TreeNode(pivot)
        root.left = self.__build_tree(preorder, pre_left + 1, pre_left + pivot_index - in_left,
                                      inorder, in_left, pivot_index - 1)

        root.right = self.__build_tree(preorder, pre_left + pivot_index - in_left + 1, pre_right,
                                       inorder, pivot_index + 1, in_right)
        return root
```

**复杂度分析：**

（这里感谢用户 [@duanxiaodai](/u/duanxiaodai/) 的纠正。）

+ 时间复杂度：$O(N^2)$，这里 $N$ 是二叉树的结点个数，每调用一次递归方法创建一个结点，一共创建 $N$ 个结点，在中序遍历中找到根结点在中序遍历中的位置，是与 $N$ 相关的，这里不计算递归方法占用的时间。
+ 空间复杂度：$O(1)$，这里不计算递归方法占用的空间。

**参考代码 2**：可以将中序遍历的值和索引存在一个哈希表中，这样就可以一下子找到根结点在中序遍历数组中的索引。

* []

```Java
import java.util.HashMap;
import java.util.Map;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) {
        val = x;
    }
}

public class Solution {

    private int[] preorder;
    private Map<Integer, Integer> hash;

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int preLen = preorder.length;
        int inLen = inorder.length;
        if (preLen != inLen) {
            throw new RuntimeException("Incorrect input data.");
        }
        this.preorder = preorder;
        this.hash = new HashMap<>();
        for (int i = 0; i < inLen; i++) {
            hash.put(inorder[i], i);
        }

        return buildTree(0, preLen - 1, 0, inLen - 1);
    }


    private TreeNode buildTree(int preLeft, int preRight, int inLeft, int inRight) {
        // 因为是递归调用的方法，按照国际惯例，先写递归终止条件
        if (preLeft > preRight || inLeft > inRight) {
            return null;
        }
        // 先序遍历的起点元素很重要
        int pivot = preorder[preLeft];
        TreeNode root = new TreeNode(pivot);
        int pivotIndex = hash.get(pivot);
        root.left = buildTree(preLeft + 1, pivotIndex - inLeft + preLeft,
                inLeft, pivotIndex - 1);
        root.right = buildTree(pivotIndex - inLeft + preLeft + 1, preRight,
                pivotIndex + 1, inRight);
        return root;
    }
}
```

**复杂度分析：**

+ 时间复杂度：$O(N)$，这里 $N$ 是二叉树的结点个数，每调用一次递归方法创建一个结点，一共创建 $N$ 个结点，这里不计算递归方法占用的时间。
+ 空间复杂度：$O(N)$，这里忽略递归方法占用的空间，因为是对数级别的，比 $N$ 小。

